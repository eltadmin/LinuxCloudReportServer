# Update Instructions to Fix Circular Import Error and Add Missing Commands

We need to fix a circular import issue in the server code and add missing command handlers. Follow these steps:

1. Create a new file `server/constants.py` with the following content:
```python
"""
Constants for the Report Server
"""

# Dictionary used for crypto key generation - must match client dictionary exactly
CRYPTO_DICTIONARY = [
    '123hk12h8dcal',
    'FT676Ugug6sFa',
    'a6xbBa7A8a9la',
    'qMnxbtyTFvcqi',
    'cx7812vcxFRCC',
    'bab7u682ftysv',
    'YGbsux&Ygsyxg',
    'MSN><hu8asG&&',
    '23yY88syHXvvs',
    '987sX&sysy891'
]
```

2. Edit `server/__init__.py` to remove the CRYPTO_DICTIONARY and move the imports after the logging configuration:
```python
"""
Report Server Package
"""

import logging
import sys

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

from .server import ReportServer
from .tcp_server import TCPServer
from .http_server import HTTPServer
from .db import Database
from .crypto import DataCompressor

__all__ = ['ReportServer', 'TCPServer', 'HTTPServer', 'Database', 'DataCompressor']
```

3. Update `server/tcp_server.py` to import CRYPTO_DICTIONARY from constants instead:
```python
# Change this line:
from . import CRYPTO_DICTIONARY

# To this:
from .constants import CRYPTO_DICTIONARY
```

4. Add missing commands to the `handle_command` method in `server/tcp_server.py`:

   a. Add the INFO command (for client ID initialization):
   ```python
   elif cmd == 'INFO':
       # Handle client ID initialization
       # Check if crypto key is negotiated
       if not conn.crypto_key:
           logger.error("Crypto key is not negotiated")
           return 'ERROR Crypto key is not negotiated'
       
       # Get encrypted data from client
       if len(parts) < 2 or not parts[1].startswith('DATA='):
           return 'ERROR Missing DATA parameter'
       
       encrypted_data = parts[1][5:]  # Remove DATA= prefix
       
       # Decrypt data
       decrypted_data = conn.decrypt_data(encrypted_data)
       if not decrypted_data:
           logger.error(f"Failed to decrypt data: {conn.last_error}")
           return f'ERROR Failed to decrypt data: {conn.last_error}'
       
       # Parse data as key-value pairs
       data_pairs = {}
       for line in decrypted_data.splitlines():
           if '=' in line:
               key, value = line.split('=', 1)
               data_pairs[key] = value
       
       # Validate data
       if 'ТТ' not in data_pairs or data_pairs['ТТ'] != 'Test':
           logger.error("Decryption problem - validation failed")
           return 'ERROR Decryption validation failed'
       
       # Store client information
       conn.client_id = data_pairs.get('ID', '')
       
       # Create response data
       response_data = {
           'ID': conn.client_id,
           'EX': (datetime.now() + timedelta(days=365)).strftime('%y%m%d'),
           'EN': 'True',
           'CD': datetime.now().strftime('%y%m%d'),
           'CT': datetime.now().strftime('%H%M%S')
       }
       
       # Convert response to string
       response_text = '\n'.join([f"{k}={v}" for k, v in response_data.items()])
       
       # Encrypt response
       encrypted_response = conn.encrypt_data(response_text)
       if not encrypted_response:
           logger.error(f"Failed to encrypt response: {conn.last_error}")
           return f'ERROR Failed to encrypt response: {conn.last_error}'
       
       # Save connection in connections dictionary
       self.connections[conn.client_id] = conn
       
       # Return response
       return f'200 OK\nDATA={encrypted_response}'
   ```

   b. Add the SRSP command (for client responses):
   ```python
   elif cmd == 'SRSP':
       # Handle client response to a server request
       # Extract command counter and data from parameters
       cmd_counter = None
       data = None
       
       for part in parts[1:]:
           if part.startswith('CMD='):
               cmd_counter = part[4:]
           elif part.startswith('DATA='):
               data = part[5:]
       
       if not cmd_counter:
           logger.error("Missing CMD parameter in SRSP")
           return 'ERROR Missing CMD parameter'
       
       if not data:
           logger.error("Missing DATA parameter in SRSP")
           return 'ERROR Missing DATA parameter'
       
       # Check if crypto key is negotiated
       if not conn.crypto_key:
           logger.error("Crypto key is not negotiated")
           return 'ERROR Crypto key is not negotiated'
       
       # Decrypt the data
       decrypted = conn.decrypt_data(data)
       if not decrypted:
           logger.error(f"Failed to decrypt SRSP data: {conn.last_error}")
           return f'ERROR Failed to decrypt SRSP data: {conn.last_error}'
       
       # Store the response for the matching request
       logger.info(f"Received response for command {cmd_counter}: {decrypted}")
       
       return '200 OK'
   ```

5. Make sure to add the import for timedelta:
```python
from datetime import datetime, timedelta
```

6. Rebuild and restart the server containers:
```bash
docker-compose down
docker-compose up -d --build
```

7. Check the logs to verify the server is starting correctly:
```bash
docker-compose logs -f
``` 